#include "MPU6050.h"
/*
穿越机方向说明：
前后倾斜：Pitch
左右倾斜：Roll
*/

//定义不同测量范围的刻度因子
#define Gyro_250_Scale_Factor   131.0f
#define Gyro_500_Scale_Factor   65.5f
#define Gyro_1000_Scale_Factor  32.8f
#define Gyro_2000_Scale_Factor  16.4f
#define Accel_2_Scale_Factor    16384.0f
#define Accel_4_Scale_Factor    8192.0f
#define Accel_8_Scale_Factor    4096.0f
#define Accel_16_Scale_Factor   2048.0f
#define DEFAULT_MPU_HZ 200


static signed char gyro_orientation[9] = {-1, 0, 0,
                                           0,-1, 0,
                                           0, 0, 1};//roll和pitch都是反的，yaw是正的
//
																					 
double q0=1.0f,q1=0.0f,q2=0.0f,q3=0.0f;
unsigned long sensor_timestamp;
short gyro[3], accel[3], sensors;
unsigned char more;
long quat[4];

										
float Desire_Angle_Pitch=0;
																					 
W_AND_ANGLE w_and_angle;



//float magOffset[3] = { (MAG0MAX + MAG0MIN) / 2, (MAG1MAX + MAG1MIN) / 2, (MAG2MAX + MAG2MIN) / 2 };
static  unsigned short inv_row_2_scale(const signed char *row)
{
    unsigned short b;

    if (row[0] > 0)
        b = 0;
    else if (row[0] < 0)
        b = 4;
    else if (row[1] > 0)
        b = 1;
    else if (row[1] < 0)
        b = 5;
    else if (row[2] > 0)
        b = 2;
    else if (row[2] < 0)
        b = 6;
    else
        b = 7;      // error
    return b;
}

static  unsigned short inv_orientation_matrix_to_scalar(
    const signed char *mtx)
{
    unsigned short scalar;

    /*
       XYZ  010_001_000 Identity Matrix
       XZY  001_010_000
       YXZ  010_000_001
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = inv_row_2_scale(mtx);
    scalar |= inv_row_2_scale(mtx + 3) << 3;
    scalar |= inv_row_2_scale(mtx + 6) << 6;


    return scalar;
}

static void run_self_test(void)
{
	
    int result;
    long gyro[3], accel[3];

    result = mpu_run_self_test(gyro, accel);
    if (result == 0x7) {
        /* Test passed. We can trust the gyro data here, so let's push it down
         * to the DMP.
         */
        float sens;
        unsigned short accel_sens;
        mpu_get_gyro_sens(&sens);
        gyro[0] = (long)(gyro[0] * sens);
        gyro[1] = (long)(gyro[1] * sens);
        gyro[2] = (long)(gyro[2] * sens);
        dmp_set_gyro_bias(gyro);
        mpu_get_accel_sens(&accel_sens);
        accel[0] *= accel_sens;
        accel[1] *= accel_sens;
        accel[2] *= accel_sens;
        dmp_set_accel_bias(accel);
		//printf("setting bias succesfully ......\r\n");
    }
	else
	{
		//printf("bias has not been modified ......\r\n");
	}

}

//对于MPU6050的初始化
void MPU6050_Init(void)
{
	int result=1;

	while(result)
	{
		
		result=mpu_init(); //初始化MPU6050
		//st.chip_cfg.sample_rate就是在此处进行了设定
		//st.chip_cfg结构体在此处进行了初始化
	
	}
	
	if(!result)
	{	 		 
	
		Log_Uartx("mpu initialization complete......\n ");		//mpu initialization complete	 	  

		if(!mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL))		//mpu_set_sensor
			Log_Uartx("mpu_set_sensor complete ......\n");
		else
			Log_Uartx("mpu_set_sensor come across error ......\n");

		if(!mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL))	//mpu_configure_fifo
			Log_Uartx("mpu_configure_fifo complete ......\n");
		else
			Log_Uartx("mpu_configure_fifo come across error ......\n");

		if(!mpu_set_sample_rate(DEFAULT_MPU_HZ))	   	  		//mpu_set_sample_rate
		//st.chip_cfg.sample_rate就是在此处发生了改变。
		 Log_Uartx("mpu_set_sample_rate complete ......\n");
		else
		 	Log_Uartx("mpu_set_sample_rate error ......\n");

		if(!dmp_load_motion_driver_firmware())   	  			//dmp_load_motion_driver_firmvare
			Log_Uartx("dmp_load_motion_driver_firmware complete ......\n");
		else
			Log_Uartx("dmp_load_motion_driver_firmware come across error ......\n");

		if(!dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation))) 	  //dmp_set_orientation
		 	Log_Uartx("dmp_set_orientation complete ......\n");
		else
		 	Log_Uartx("dmp_set_orientation come across error ......\n");

		if(!dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
		    DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO |
		    DMP_FEATURE_GYRO_CAL))		   	 					 //dmp_enable_feature
		 	Log_Uartx("dmp_enable_feature complete ......\n");
		else
		 	Log_Uartx("dmp_enable_feature come across error ......\n");

		if(!dmp_set_fifo_rate(DEFAULT_MPU_HZ))   	 			 //dmp_set_fifo_rate
		 	Log_Uartx("dmp_set_fifo_rate complete ......\n");
		else
		 	Log_Uartx("dmp_set_fifo_rate come across error ......\n");

		run_self_test();		//自检

		if(!mpu_set_dmp_state(1))
		 	Log_Uartx("mpu_set_dmp_state complete ......\n");
		else
		 	Log_Uartx("mpu_set_dmp_state come across error ......\n");
	}
}

float Adv(float *Data,uint16_t Len)	
{
	uint16_t k;
	float SUM=0;
	for(k=0;k<Len;k++)
		SUM += Data[k];
	SUM = SUM / Len;
	return SUM;
}

#define Samp_Size	5
extern float Watch1,Watch2,Watch3;
unsigned char Window_CNT=0;
float	Window_Gyro_Pitch[Samp_Size]={0};
float	Window_Gyro_Roll[Samp_Size]={0};
float	Window_Gyro_Yaw[Samp_Size]={0};
float Pitch_Pre,Roll_Pre,Yaw_Pre;
//此函数就是读取6050数据的操作函数
void MPU6050_Pose(void)
{
	float Pitch,Roll,Yaw;
	double Gyrox,Gyroy,Gyroz;
	
	dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors, &more);	 
	if(sensors & INV_WXYZ_QUAT )
	{
		q0 = (double)quat[0] / q30;	
		q1 = (double)quat[1] / q30;
		q2 = (double)quat[2] / q30;
		q3 = (double)quat[3] / q30;
  
		Pitch = asin(2 * q1 * q3 - 2 * q0* q2)* RAD_TO_DEG;
		if(fabs(Pitch)>90)		Pitch = Pitch_Pre;
		else									Pitch_Pre = Pitch;
		Roll  = -atan2( -2 * q1 * q1 - 2 * q2* q2 + 1,2 * q2 * q3 + 2 * q0 * q1)* RAD_TO_DEG;	
		Roll -= 90;
		if(fabs(Roll)>90)			Roll = Roll_Pre;
		else									Roll_Pre = Roll;
		Yaw   = atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * RAD_TO_DEG;	
		if(fabs(Yaw)>180)			Yaw = Yaw_Pre;
		else									Yaw_Pre = Yaw;
		w_and_angle.angle_roll = Roll+roll_angel_offset; 		//横滚角度
		w_and_angle.angle_pitch = Pitch+pitch_angel_offset;	//俯仰角度
		w_and_angle.angle_yaw = Yaw + 180; // 转化为0~360；	//偏航角度
			
		Watch1 = 	Pitch;
		Watch2 = 	Roll;
		Watch3 = 	Yaw;
			
		Gyrox = gyro[0]/(double)Gyro_2000_Scale_Factor;
		Gyroy = gyro[1]/(double)Gyro_2000_Scale_Factor;
		Gyroz = gyro[2]/(double)Gyro_2000_Scale_Factor;
		
		Window_Gyro_Roll[Window_CNT] = Gyrox;
		Window_Gyro_Pitch[Window_CNT] = Gyroy;
		Window_Gyro_Yaw[Window_CNT] = Gyroz;
		if(++Window_CNT == Samp_Size)
			Window_CNT = 0;
		w_and_angle.w_pitch = Adv(Window_Gyro_Pitch,Samp_Size);
		w_and_angle.w_roll = Adv(Window_Gyro_Roll,Samp_Size);
		w_and_angle.w_yaw = Adv(Window_Gyro_Yaw,Samp_Size);
	}	
}



















